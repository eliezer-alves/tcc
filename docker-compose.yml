version: '3.5'

services:
  # Configuração base para as instâncias da API
  # Instância 1 da API
  api1: &api
    build: .
    container_name: api1
    hostname: api1
    environment:
      DATABASE_URL: 'postgresql://postgres:password@postgres:5432/postgres?schema=public'
      JWT_SECRET: 'e7a58dde987f60c533eed313c3b567f50db9beb890599e244b68b8ba3ed4d68f'
    expose:
      - '3000'
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.45'
          memory: '0.5G'

  # Instância 2 da API
  api2:
    <<: *api
    container_name: api2
    hostname: api2
    expose:
      - '3001'

  # Serviço PostgreSQL
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    command: postgres -c 'max_connections=450'
    volumes:
      - ./postgresql.conf:/etc/postgresql.conf
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.45'
          memory: '8G'

  # Serviço Nginx para balanceamento de carga
  nginx:
    container_name: tcc-api-nginx
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api1
      - api2
    ports:
      - '80:9999'
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '0.2GB'
